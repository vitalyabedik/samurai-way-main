{"version":3,"file":"static/js/593.07482e77.chunk.js","mappings":"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","sources":["components/Login/Login.tsx","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50","components/common/FormsControls/FormsControls.tsx","utils/validators/index.ts","webpack://samurai-way/./src/components/Login/Login.module.css?3530"],"sourcesContent":["import React from 'react';\r\nimport {compose} from 'redux';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\n\r\nimport styles from './Login.module.css'\r\n\r\nimport {createField, GetStringKeys, Input} from '../common/FormsControls';\r\nimport {required} from '../../utils/validators';\r\nimport {loginThunkCreator} from '../../redux/thunks/authThunk';\r\nimport {AppStateType} from '../../redux/redux-store';\r\n\r\n\r\ntype LoginFormPropsType = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport type LoginFormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string | null\r\n}\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormDataType>;\r\ntype AllSampleFormProps = LoginFormPropsType & InjectedFormProps<LoginFormDataType, LoginFormPropsType>\r\n\r\nexport const LoginForm: React.FC<AllSampleFormProps> = (props) => {\r\n    const {\r\n        error,\r\n        captchaUrl,\r\n        handleSubmit\r\n    } = props\r\n\r\n    return (\r\n        <form className={styles.loginForm} onSubmit={handleSubmit}>\r\n            <div>\r\n                {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], Input, {className: styles.loginInput}, 'Email Address')}\r\n            </div>\r\n            <div>\r\n                {createField<LoginFormValuesTypeKeys>('Password', 'password', [required], Input, {type: 'password'}, 'Password')}\r\n            </div>\r\n\r\n            {captchaUrl && <img src={captchaUrl} alt=\"captcha-image\"/>}\r\n            {captchaUrl && createField<LoginFormValuesTypeKeys>('Symbols from image', 'captcha', [required], Input)}\r\n\r\n            {error && <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button type='submit' className={styles.loginButton}>Get Started</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormDataType, LoginFormPropsType>({form: 'login'})(LoginForm)\r\n\r\ntype LoginType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string | null) => void\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport const Login: React.FC<LoginType> = (props) => {\r\n    const {\r\n        isAuth,\r\n        login,\r\n        captchaUrl\r\n    } = props\r\n\r\n    const onSubmitHandler = (formData: LoginFormDataType) => {\r\n        login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (isAuth) return <Redirect to={'/profile'}/>\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.root}>\r\n                <h1 className={styles.title}>Login</h1>\r\n                <LoginReduxForm\r\n                    onSubmit={onSubmitHandler}\r\n                    captchaUrl={captchaUrl}\r\n                />\r\n            </div>\r\n            <div className={styles.testLoginInfo}>\r\n                <p>To log in get registered\r\n                    <a href={'https://social-network.samuraijs.com/'} target={'_blank'} rel=\"noreferrer\">\r\n                        <span className={styles.link}> here,</span>\r\n                    </a>\r\n                </p>\r\n                <p>or use common test account credentials:</p>\r\n                <p>Email: free@samuraijs.com</p>\r\n                <p>Password: free</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captchaUrl: state.auth.captchaUrl\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        login: loginThunkCreator,\r\n    }),\r\n)(Login)\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__juIQD\",\"error\":\"FormsControls_error__6v+Mj\",\"errorMessage\":\"FormsControls_errorMessage__oQ6Zg\",\"blink1\":\"FormsControls_blink1__unvzJ\",\"checkboxLabel\":\"FormsControls_checkboxLabel__-gozi\",\"createFieldRoot\":\"FormsControls_createFieldRoot__p05ht\",\"createFieldText\":\"FormsControls_createFieldText__-rZTC\"};","import React, {DetailedHTMLProps, TextareaHTMLAttributes} from 'react';\r\nimport {Field, WrappedFieldMetaProps} from 'redux-form';\r\n\r\nimport styles from './FormsControls.module.css'\r\n\r\nimport {FieldValidatorType} from '../../../utils/validators';\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\ntype FormsControlType = {\r\n    input: DefaultInputPropsType\r\n    meta: WrappedFieldMetaProps\r\n    FormType: string\r\n}\r\n\r\nexport const FormsControls: React.FC<FormsControlType> = ({\r\n                                                              input,\r\n                                                              meta,\r\n                                                              FormType,\r\n                                                              ...props\r\n                                                          }) => {\r\n    const error = meta.touched && meta.error\r\n    const finalInputName = `${styles.formControl} ${error ? styles.error : ''}`\r\n\r\n    return (\r\n        <div className={finalInputName}>\r\n            <FormType {...input} {...props}/>\r\n            {error && <div className={styles.errorMessage}>{meta.error}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<FormsControlType> = ({...props}) => {\r\n    return <FormsControls {...props} FormType=\"textarea\"/>\r\n}\r\n\r\nexport const Input: React.FC<FormsControlType> = ({...props}) => {\r\n    return <FormsControls {...props} FormType=\"input\"/>\r\n}\r\n\r\nexport function createField<FormKeyType extends string>(\r\n    placeholder: string | undefined,\r\n    name: FormKeyType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: React.FC<FormsControlType>,\r\n    props?: {\r\n        className?: string,\r\n        type?: string\r\n    },\r\n    text = '',\r\n) {\r\n    return (\r\n        <div className={styles.createFieldRoot}>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                validate={validators}\r\n                component={component}\r\n                className={props?.className}\r\n                {...props}\r\n            />{' '}\r\n            <label className={styles.createFieldText}> {text} </label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>;","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    return value ? undefined : 'Field is required';\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Login_wrapper__6wQs-\",\"root\":\"Login_root__YFkMZ\",\"loginInput\":\"Login_loginInput__curji\",\"testLoginInfo\":\"Login_testLoginInfo__RapfE\",\"title\":\"Login_title__t-xiS\",\"loginForm\":\"Login_loginForm__u4BMz\",\"loginCheckbox\":\"Login_loginCheckbox__IATv5\",\"loginCheckboxText\":\"Login_loginCheckboxText__2hzRe\",\"formSummaryError\":\"Login_formSummaryError__2GnfW\",\"blink1\":\"Login_blink1__9f3Iy\",\"link\":\"Login_link__IHgbU\",\"loginButton\":\"Login_loginButton__-i-IQ\"};"],"names":["LoginReduxForm","reduxForm","form","props","error","captchaUrl","handleSubmit","className","styles","onSubmit","createField","required","Input","type","src","alt","compose","connect","state","isAuth","auth","login","loginThunkCreator","to","formData","email","password","rememberMe","captcha","href","target","rel","FormsControls","input","meta","FormType","touched","finalInputName","Textarea","placeholder","name","validators","component","text","Field","validate","value","undefined","maxLengthCreator","maxLength","length"],"sourceRoot":""}