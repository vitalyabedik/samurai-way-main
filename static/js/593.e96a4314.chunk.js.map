{"version":3,"file":"static/js/593.e96a4314.chunk.js","mappings":"8PAgEMA,GAAiBC,EAAAA,EAAAA,GAAiD,CAACC,KAAM,SAAxDD,EArCgC,SAACE,GACpD,IACIC,EAGAD,EAHAC,MACAC,EAEAF,EAFAE,WACAC,EACAH,EADAG,aAGJ,OACI,kBAAMC,UAAWC,EAAAA,EAAAA,UAAkBC,SAAUH,EAA7C,WACI,0BACKI,EAAAA,EAAAA,IAAqC,QAAS,QAAS,CAACC,EAAAA,GAAWC,EAAAA,OAExE,0BACKF,EAAAA,EAAAA,IAAqC,WAAY,WAAY,CAACC,EAAAA,GAAWC,EAAAA,GAAO,CAACC,KAAM,gBAE5F,gBAAKN,UAAWC,EAAAA,EAAAA,cAAhB,UACKE,EAAAA,EAAAA,SAAqCI,EAAW,aAAc,GAAIF,EAAAA,GAAO,CAACC,KAAM,YAAa,iBAOjGR,IAAc,gBAAKU,IAAKV,EAAYW,IAAI,kBACxCX,IAAcK,EAAAA,EAAAA,IAAqC,qBAAsB,UAAW,CAACC,EAAAA,GAAWC,EAAAA,IAEhGR,IAAS,gBAAKG,UAAWC,EAAAA,EAAAA,iBAAhB,SACLJ,KAEL,0BACI,mBAAQG,UAAWC,EAAAA,EAAAA,YAAnB,2BAmDhB,GAAeS,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KARoB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OACnBf,WAAYc,EAAME,KAAKhB,cAKF,CACrBiB,MAAOC,EAAAA,KAFf,EApC0C,SAACpB,GACvC,IACIiB,EAGAjB,EAHAiB,OACAE,EAEAnB,EAFAmB,MACAjB,EACAF,EADAE,WAOJ,OAAIe,GAAe,SAAC,KAAD,CAAUI,GAAI,cAG7B,iBAAKjB,UAAWC,EAAAA,EAAAA,KAAhB,WACI,mCACA,SAACR,EAAD,CACIS,SAVY,SAACgB,GACrBH,EAAMG,EAASC,MAAMD,EAASE,SAASF,EAASG,WAAWH,EAASI,UAU5DxB,WAAYA,W,kJCzF5B,EAA8B,mCAA9B,EAAyE,6BAAzE,EAAqH,oC,uCCaxGyB,EAA4C,SAAC,GAKO,IAJHC,EAIE,EAJFA,MACAC,EAGE,EAHFA,KACAC,EAEE,EAFFA,SACG9B,GACD,YACtDC,EAAQ4B,EAAKE,SAAWF,EAAK5B,MAC7B+B,EAAc,UAAM3B,EAAN,YAA4BJ,EAAQI,EAAe,IAEvE,OACI,iBAAKD,UAAW4B,EAAhB,UACK/B,IAAS,gBAAKG,UAAWC,EAAhB,SAAsCwB,EAAK5B,SACrD,SAAC6B,GAAD,kBAAcF,GAAW5B,QAKxBiC,EAAuC,SAAC,GAAgB,IAAZjC,EAAW,oBAChE,OAAO,SAAC2B,GAAD,kBAAmB3B,GAAnB,IAA0B8B,SAAS,eAGjCrB,EAAoC,SAAC,GAAgB,IAAZT,EAAW,oBAC7D,OAAO,SAAC2B,GAAD,kBAAmB3B,GAAnB,IAA0B8B,SAAS,YAGvC,SAASvB,EACZ2B,EACAC,EACAC,EACAC,EACArC,GAGD,IADCsC,EACF,uDADS,GAEP,OACI,4BACI,SAACC,EAAA,GAAD,QACIL,YAAaA,EACbC,KAAMA,EACNK,SAAUJ,EACVC,UAAWA,EACXjC,UAAS,OAAEJ,QAAF,IAAEA,OAAF,EAAEA,EAAOI,WACdJ,IACL,KACH,iCAASsC,EAAT,Y,4ECxDL,IAAM9B,EAA+B,SAACiC,GACzC,OAAOA,OAAQ9B,EAAY,qBAIlB+B,EAAmB,SAACC,GAAD,OAA2C,SAACF,GACxE,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCPlC,KAAgB,KAAO,oBAAoB,UAAY,yBAAyB,cAAgB,6BAA6B,kBAAoB,iCAAiC,iBAAmB,gCAAgC,OAAS","sources":["components/Login/Login.tsx","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50","components/common/FormsControls/FormsControls.tsx","utils/validators/index.ts","webpack://samurai-way/./src/components/Login/Login.module.css?3530"],"sourcesContent":["import React from 'react';\r\nimport {compose} from 'redux';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\n\r\nimport styles from './Login.module.css'\r\n\r\nimport {createField, GetStringKeys, Input} from '../common/FormsControls';\r\nimport {required} from '../../utils/validators';\r\nimport {loginThunkCreator} from '../../redux/thunks/authThunk';\r\nimport {AppStateType} from '../../redux/redux-store';\r\n\r\n\r\ntype LoginFormPropsType = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport type LoginFormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string | null\r\n}\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormDataType>;\r\ntype AllSampleFormProps = LoginFormPropsType & InjectedFormProps<LoginFormDataType, LoginFormPropsType>\r\n\r\nexport const LoginForm: React.FC<AllSampleFormProps> = (props) => {\r\n    const {\r\n        error,\r\n        captchaUrl,\r\n        handleSubmit\r\n    } = props\r\n\r\n    return (\r\n        <form className={styles.loginForm} onSubmit={handleSubmit}>\r\n            <div>\r\n                {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], Input)}\r\n            </div>\r\n            <div>\r\n                {createField<LoginFormValuesTypeKeys>('Password', 'password', [required], Input, {type: 'password',})}\r\n            </div>\r\n            <div className={styles.loginCheckbox}>\r\n                {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me',)}\r\n                {/*<Field type=\"Checkbox\"*/}\r\n                {/*       name={'rememberMe'}*/}\r\n                {/*       component={Input}*/}\r\n                {/*/> <span className={styles.loginCheckboxText}>remember me</span>*/}\r\n            </div>\r\n\r\n            {captchaUrl && <img src={captchaUrl} alt=\"captcha-image\"/>}\r\n            {captchaUrl && createField<LoginFormValuesTypeKeys>('Symbols from image', 'captcha', [required], Input)}\r\n\r\n            {error && <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button className={styles.loginButton}>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormDataType, LoginFormPropsType>({form: 'login'})(LoginForm)\r\n\r\ntype LoginType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string | null) => void\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport const Login: React.FC<LoginType> = (props) => {\r\n    const {\r\n        isAuth,\r\n        login,\r\n        captchaUrl\r\n    } = props\r\n\r\n    const onSubmitHandler = (formData: LoginFormDataType) => {\r\n        login(formData.email,formData.password,formData.rememberMe,formData.captcha)\r\n    }\r\n\r\n    if (isAuth) return <Redirect to={'/profile'}/>\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm\r\n                onSubmit={onSubmitHandler}\r\n                captchaUrl={captchaUrl}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captchaUrl: state.auth.captchaUrl\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        login: loginThunkCreator,\r\n    }),\r\n)(Login)\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__juIQD\",\"error\":\"FormsControls_error__6v+Mj\",\"errorMessage\":\"FormsControls_errorMessage__oQ6Zg\",\"blink1\":\"FormsControls_blink1__unvzJ\",\"checkboxLabel\":\"FormsControls_checkboxLabel__-gozi\"};","import React, {DetailedHTMLProps, TextareaHTMLAttributes} from 'react';\r\nimport {Field, WrappedFieldMetaProps} from 'redux-form';\r\n\r\nimport styles from './FormsControls.module.css'\r\n\r\nimport {FieldValidatorType} from '../../../utils/validators';\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\ntype FormsControlType = {\r\n    input: DefaultInputPropsType\r\n    meta: WrappedFieldMetaProps\r\n    FormType: string\r\n}\r\n\r\nexport const FormsControls: React.FC<FormsControlType> = ({\r\n                                                              input,\r\n                                                              meta,\r\n                                                              FormType,\r\n                                                              ...props\r\n                                                          }) => {\r\n    const error = meta.touched && meta.error\r\n    const finalInputName = `${styles.formControl} ${error ? styles.error : ''}`\r\n\r\n    return (\r\n        <div className={finalInputName}>\r\n            {error && <div className={styles.errorMessage}>{meta.error}</div>}\r\n            <FormType {...input} {...props}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<FormsControlType> = ({...props}) => {\r\n    return <FormsControls {...props} FormType=\"textarea\"/>\r\n}\r\n\r\nexport const Input: React.FC<FormsControlType> = ({...props}) => {\r\n    return <FormsControls {...props} FormType=\"input\"/>\r\n}\r\n\r\nexport function createField<FormKeyType extends string>(\r\n    placeholder: string | undefined,\r\n    name: FormKeyType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: React.FC<FormsControlType>,\r\n    props?: {className?: string,\r\n        type?:string},\r\n    text = '',\r\n) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                validate={validators}\r\n                component={component}\r\n                className={props?.className}\r\n                {...props}\r\n            />{' '}\r\n            <label> {text} </label>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>;","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    return value ? undefined : 'Field is required';\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Login_root__YFkMZ\",\"loginForm\":\"Login_loginForm__u4BMz\",\"loginCheckbox\":\"Login_loginCheckbox__IATv5\",\"loginCheckboxText\":\"Login_loginCheckboxText__2hzRe\",\"formSummaryError\":\"Login_formSummaryError__2GnfW\",\"blink1\":\"Login_blink1__9f3Iy\"};"],"names":["LoginReduxForm","reduxForm","form","props","error","captchaUrl","handleSubmit","className","styles","onSubmit","createField","required","Input","type","undefined","src","alt","compose","connect","state","isAuth","auth","login","loginThunkCreator","to","formData","email","password","rememberMe","captcha","FormsControls","input","meta","FormType","touched","finalInputName","Textarea","placeholder","name","validators","component","text","Field","validate","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}