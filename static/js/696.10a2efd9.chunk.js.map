{"version":3,"file":"static/js/696.10a2efd9.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.module.css","components/Dialogs/Message/Message.tsx","webpack://samurai-way/./src/components/Dialogs/DialogItems/DialogItems.module.css?30be","components/Dialogs/DialogItems/DialogItems.tsx","webpack://samurai-way/./src/components/Dialogs/DialogsForm/DialogsForm.module.css?b378","components/Dialogs/DialogsForm/DialogsForm.tsx","components/Dialogs/DialogsContainer/DialogsContainer.tsx","redux/actions/dialogsAction.ts","components/Dialogs/Dialogs.tsx","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50","components/common/FormsControls/FormsControls.tsx","hoc/withAuthRedirect.tsx","utils/validators/index.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Dialogs_root__WpZxa\",\"messages\":\"Dialogs_messages__t-sij\",\"messages__items\":\"Dialogs_messages__items__aUf9M\"};","// extracted by mini-css-extract-plugin\nexport default {};","import styles from './Message.module.css'\r\n\r\ntype PropsType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport const MessageItem = (props: PropsType) => {\r\n    const {message} = props\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"DialogItems_root__kVYsC\",\"title\":\"DialogItems_title__dk4YT\",\"item\":\"DialogItems_item__BYBZ8\",\"item__image\":\"DialogItems_item__image__v+Dz4\",\"item__avatar\":\"DialogItems_item__avatar__jn-Py\",\"userAndMessage\":\"DialogItems_userAndMessage__T+w7y\",\"item__userName\":\"DialogItems_item__userName__CM9Ha\",\"userMessage\":\"DialogItems_userMessage__uD7bS\",\"item__link\":\"DialogItems_item__link__HzMAR\",\"item__link_active\":\"DialogItems_item__link_active__jEhtr\"};","import {NavLink} from 'react-router-dom';\r\n\r\nimport styles from './DialogItems.module.css'\r\nimport {UserType} from '../../../types';\r\n\r\ntype PropsType = {\r\n    id: number\r\n    dialog: UserType\r\n}\r\n\r\nexport const DialogItems = (props: PropsType) => {\r\n    const {id, dialog} = props\r\n\r\n    let path = `/dialogs/${id}`\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            <NavLink key={dialog.id} to={path}>\r\n                <li className={styles.item}>\r\n                    <div className={styles.item__image}>\r\n                        <img className={styles.item__avatar} src={dialog.avatar} alt=\"contact-avatar\"/>\r\n                    </div>\r\n                    <div className={styles.userAndMessage}>\r\n                        <div className={styles.item__userName}>\r\n                            {`${dialog.userFirstName} ${dialog.userLastName}`}\r\n                        </div>\r\n                        <div className={styles.userMessage}>\r\n                            'Sed diam nonummy nibh euismod tincidunt ut laoreet dolore'\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"DialogsForm_root__N2eod\",\"textareaBlock\":\"DialogsForm_textareaBlock__Pn41k\",\"textarea\":\"DialogsForm_textarea__xNMSg\",\"button\":\"DialogsForm_button__Zl68v\"};","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\n\r\nimport styles from './DialogsForm.module.css'\r\nimport {Textarea} from '../../common/FormsControls';\r\nimport {maxLengthCreator, required} from '../../../utils/validators';\r\n\r\nexport type FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLengthText = maxLengthCreator(50)\r\n\r\nexport const DialogsForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <div className={styles.root}>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div className={styles.textareaBlock}>\r\n                    <Field component={Textarea}\r\n                           name=\"newMessageBody\"\r\n                           placeholder=\"Enter your Message\"\r\n                           validate={[required, maxLengthText]}\r\n                    />\r\n                </div>\r\n                <div className={styles.buttonBlock}>\r\n                    <button className={styles.button}>Send</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const DialogsFormRedux = reduxForm<FormDataType>({form: 'dialogsForm'})(DialogsForm)\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {compose} from 'redux';\r\nimport {connect} from 'react-redux';\r\n\r\nimport {addMessageAC} from '../../../redux/actions/dialogsAction';\r\nimport {Dialogs} from '../Dialogs';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport {InitialStateType} from '../../../redux/reducers/dialogsReducer';\r\nimport {withAuthRedirectComponent} from '../../../hoc/withAuthRedirect';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage : InitialStateType\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToProps\r\n\r\nconst mapStateToProps = (state : AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        sendMessage: addMessageAC,\r\n    }),\r\n    withRouter,\r\n    withAuthRedirectComponent\r\n)(Dialogs)\r\n\r\n","import {MESSAGES_ADD} from './actionTypes';\r\n\r\nexport type DialogsActionType = ReturnType<typeof addMessageAC>\r\n\r\nexport const addMessageAC = (newMessageBody: string) => ({\r\n    type: MESSAGES_ADD,\r\n    payload: {\r\n        newMessageBody\r\n    }\r\n} as const)\r\n","import React from 'react';\r\n\r\nimport styles from './Dialogs.module.css'\r\n\r\nimport {MessageItem} from './Message';\r\nimport {DialogItems} from './DialogItems';\r\nimport {DialogsFormRedux, FormDataType} from './DialogsForm';\r\nimport {DialogsPropsType} from '../Dialogs/DialogsContainer/DialogsContainer';\r\n\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n    const {sendMessage} = props\r\n    const {dialogs, messages} = props.dialogsPage\r\n\r\n    const addNewMessage = (values: FormDataType) => {\r\n       sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    const dialogsElements = dialogs.map(dialog => {\r\n        return (\r\n            <DialogItems key={dialog.id} id={dialog.id} dialog={dialog}/>\r\n        )\r\n    })\r\n\r\n    const messagesElements = messages.map(message => {\r\n        return (\r\n            <MessageItem key={message.id} id={message.id} message={message.message}/>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className={styles.root}>\r\n            <div className={styles.dialogs__items}>{dialogsElements}</div>\r\n            <div className={styles.messages}>\r\n                <div className={styles.messages__items}>{messagesElements}</div>\r\n                <DialogsFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__juIQD\",\"error\":\"FormsControls_error__6v+Mj\",\"errorMessage\":\"FormsControls_errorMessage__oQ6Zg\",\"blink1\":\"FormsControls_blink1__unvzJ\",\"checkboxLabel\":\"FormsControls_checkboxLabel__-gozi\"};","import React, {DetailedHTMLProps, TextareaHTMLAttributes} from 'react';\r\nimport {Field, WrappedFieldMetaProps} from 'redux-form';\r\n\r\nimport styles from './FormsControls.module.css'\r\n\r\nimport {FieldValidatorType} from '../../../utils/validators';\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>\r\ntype FormsControlType = {\r\n    input: DefaultInputPropsType\r\n    meta: WrappedFieldMetaProps\r\n    FormType: string\r\n}\r\n\r\nexport const FormsControls: React.FC<FormsControlType> = ({\r\n                                                              input,\r\n                                                              meta,\r\n                                                              FormType,\r\n                                                              ...props\r\n                                                          }) => {\r\n    const error = meta.touched && meta.error\r\n    const finalInputName = `${styles.formControl} ${error ? styles.error : ''}`\r\n\r\n    return (\r\n        <div className={finalInputName}>\r\n            {error && <div className={styles.errorMessage}>{meta.error}</div>}\r\n            <FormType {...input} {...props}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<FormsControlType> = ({...props}) => {\r\n    return <FormsControls {...props} FormType=\"textarea\"/>\r\n}\r\n\r\nexport const Input: React.FC<FormsControlType> = ({...props}) => {\r\n    return <FormsControls {...props} FormType=\"input\"/>\r\n}\r\n\r\nexport function createField<FormKeyType extends string>(\r\n    placeholder: string | undefined,\r\n    name: FormKeyType,\r\n    validators: Array<FieldValidatorType>,\r\n    component: React.FC<FormsControlType>,\r\n    props = {},\r\n    text = \"\",\r\n) {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                validate={validators}\r\n                component={component}\r\n                {...props}\r\n            />{\" \"}\r\n            <label> {text} </label>\r\n        </div>\r\n    );\r\n}\r\nexport type GetStringKeys<T> = Extract<keyof T, string>;","import React, {ComponentType} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nimport {AppStateType} from '../redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirectComponent<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    const ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    return value ? undefined : 'Field is required';\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n\r\n    return undefined\r\n}"],"names":["MessageItem","props","message","className","styles","DialogItems","id","dialog","path","to","src","avatar","alt","userFirstName","userLastName","maxLengthText","maxLengthCreator","DialogsFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","compose","connect","state","dialogsPage","sendMessage","newMessageBody","type","MESSAGES_ADD","payload","withRouter","withAuthRedirectComponent","dialogs","messages","dialogsElements","map","messagesElements","values","FormsControls","input","meta","FormType","error","touched","finalInputName","Input","createField","validators","text","mapStateToProps","isAuth","auth","Component","restProps","value","undefined","maxLength","length"],"sourceRoot":""}